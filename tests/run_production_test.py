"""
Script pour lancer les tests de production complets
Simule l'utilisation r√©elle avec le CSV fourni
"""

import os
import sys
import pandas as pd
import asyncio
from pathlib import Path
from datetime import datetime

# Ajouter les modules au path
sys.path.append(str(Path(__file__).parent.parent))

from modules.supabase_client import SupabaseClient, SupabaseError
from modules.database_service import DatabaseService
from modules.parallel_processor_db import ParallelHotelProcessorDB, ParallelConfig
from services.extraction_service_db import ExtractionServiceDB


def test_supabase_connection():
    """Test de base de la connexion Supabase"""
    print("üîå Test de connexion Supabase...")

    try:
        client = SupabaseClient()
        print("‚úÖ Client Supabase initialis√©")

        # Test session
        session_id = client.create_extraction_session(
            "Test Production Connection",
            1,
            "test.csv"
        )
        print(f"‚úÖ Session cr√©√©e: {session_id[:8]}...")

        # Nettoyer
        client.client.table("extraction_sessions").delete().eq(
            "id", session_id
        ).execute()
        print("‚úÖ Nettoyage OK")

        return True

    except SupabaseError as e:
        print(f"‚ùå Erreur Supabase: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False


def test_database_service():
    """Test du service de base de donn√©es"""
    print("\nüóÑÔ∏è Test du service de base de donn√©es...")

    try:
        service = DatabaseService()
        print("‚úÖ DatabaseService initialis√©")

        # Test cr√©ation session
        session_id = service.create_new_session("test_production.csv", 5)
        print(f"‚úÖ Session cr√©√©e via service: {session_id[:8]}...")

        # Test mapping
        headers = ['Salles de r√©union', 'Taille', 'En U', 'Th√©√¢tre']
        rows = [['Salle Test', '30 m¬≤', '15', '25']]
        mapped = service.map_cvent_data_to_db(headers, rows)

        print(f"‚úÖ Mapping colonnes OK: {len(mapped)} salle(s)")
        print(f"   ‚Ä¢ Champs mapp√©s: {list(mapped[0].keys())}")

        # Finaliser
        service.finalize_session(session_id, success=True)
        print("‚úÖ Session finalis√©e")

        return True

    except Exception as e:
        print(f"‚ùå Erreur service DB: {e}")
        return False


def test_with_real_csv(max_hotels=3):
    """Test avec le CSV r√©el fourni"""
    print(f"\nüìä Test avec CSV r√©el ({max_hotels} h√¥tels max)...")

    try:
        # Charger le CSV
        csv_path = Path(__file__).parent / "test quelques hotels.csv"
        if not csv_path.exists():
            print(f"‚ùå CSV non trouv√©: {csv_path}")
            return False

        df = pd.read_csv(csv_path)
        sample_df = df.head(max_hotels)

        print(f"‚úÖ CSV charg√©: {len(sample_df)} h√¥tels")
        for i, row in sample_df.iterrows():
            print(f"   ‚Ä¢ {row['name']} ({row['adresse']})")

        # Test avec service d'extraction
        service = ExtractionServiceDB()
        db_service = DatabaseService()

        # Cr√©er session
        session_id = db_service.create_new_session(
            "test_real_csv.csv",
            len(sample_df)
        )

        # Pr√©parer donn√©es
        hotels_data = []
        for _, row in sample_df.iterrows():
            hotels_data.append({
                'name': row['name'],
                'address': row['adresse'],
                'url': row['URL']
            })

        # Ins√©rer en DB
        hotel_ids = db_service.prepare_hotels_batch(session_id, hotels_data)
        print(f"‚úÖ {len(hotel_ids)} h√¥tels ins√©r√©s en DB")

        # Test r√©cup√©ration stats
        stats = db_service.get_session_statistics(session_id)
        print(f"‚úÖ Stats session: {stats.get('total_hotels', 0)} total")

        # Finaliser
        db_service.finalize_session(session_id, success=True)
        print("‚úÖ Session finalis√©e avec succ√®s")

        return True

    except Exception as e:
        print(f"‚ùå Erreur test CSV r√©el: {e}")
        return False


def test_parallel_processing_mock(max_hotels=3):
    """Test du traitement parall√®le avec mock"""
    print(f"\n‚ö° Test traitement parall√®le (mock, {max_hotels} h√¥tels)...")

    try:
        from unittest.mock import patch

        # Mock des extractions
        def mock_cvent_extract(*args, **kwargs):
            hotel_name = args[0] if args else "Hotel Mock"
            return {
                'success': True,
                'data': {
                    'interface_type': 'grid',
                    'headers': ['Salles de r√©union', 'Taille', 'En U', 'Th√©√¢tre'],
                    'rows': [
                        [f'Salle {hotel_name[:10]}', '40 m¬≤', '18', '35']
                    ],
                    'salles_count': 1
                }
            }

        # Charger √©chantillon
        csv_path = Path(__file__).parent / "test quelques hotels.csv"
        df = pd.read_csv(csv_path)
        sample_df = df.head(max_hotels)

        hotels_data = []
        for _, row in sample_df.iterrows():
            hotels_data.append({
                'name': row['name'],
                'address': row['adresse'],
                'url': row['URL']
            })

        with patch('modules.cvent_extractor.extract_cvent_data', side_effect=mock_cvent_extract):
            # Configuration pour tests
            config = ParallelConfig(
                max_workers=2,
                batch_size=2,
                cvent_timeout=30
            )

            processor = ParallelHotelProcessorDB(config)
            db_service = DatabaseService()

            # Cr√©er session
            session_id = db_service.create_new_session("test_parallel.csv", len(hotels_data))

            print(f"üîÑ D√©marrage traitement parall√®le...")
            start_time = datetime.now()

            # Traitement
            final_stats = asyncio.run(
                processor.process_hotels_to_database(
                    hotels_data=hotels_data,
                    session_id=session_id,
                    extract_cvent=True,
                    extract_gmaps=False,
                    extract_website=False
                )
            )

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            print(f"‚úÖ Traitement parall√®le termin√© en {duration:.1f}s:")
            print(f"   ‚Ä¢ Total: {final_stats['total_hotels']}")
            print(f"   ‚Ä¢ Succ√®s: {final_stats['successful']}")
            print(f"   ‚Ä¢ √âchecs: {final_stats['failed']}")
            print(f"   ‚Ä¢ Session: {final_stats['session_id'][:8]}...")

            # V√©rifier en DB
            stats = db_service.get_session_statistics(session_id)
            print(f"‚úÖ V√©rification DB: {stats.get('completed', 0)} compl√©t√©s")

            return final_stats['failed'] == 0

    except Exception as e:
        print(f"‚ùå Erreur traitement parall√®le: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Fonction principale des tests"""
    print("üöÄ TESTS DE PRODUCTION - Architecture Supabase")
    print("=" * 55)

    # V√©rifier configuration
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")

    if not supabase_url or not supabase_key:
        print("‚ùå Variables SUPABASE_URL et SUPABASE_KEY requises dans .env")
        return False

    if "your-project" in supabase_url:
        print("‚ùå Veuillez configurer vos vraies cl√©s Supabase")
        return False

    print(f"‚úÖ Configuration d√©tect√©e:")
    print(f"   ‚Ä¢ URL: {supabase_url[:30]}...")
    print(f"   ‚Ä¢ Key: {supabase_key[:30]}...")

    # Tests √©tape par √©tape
    tests_results = []

    # 1. Connexion Supabase
    tests_results.append(("Connexion Supabase", test_supabase_connection()))

    # 2. Service DB
    tests_results.append(("Service Database", test_database_service()))

    # 3. CSV r√©el
    tests_results.append(("CSV R√©el", test_with_real_csv(max_hotels=3)))

    # 4. Traitement parall√®le
    tests_results.append(("Traitement Parall√®le", test_parallel_processing_mock(max_hotels=3)))

    # R√©sultats
    print("\n" + "=" * 55)
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 55)

    passed = 0
    for test_name, result in tests_results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHEC"
        print(f"{test_name:<25} | {status}")
        if result:
            passed += 1

    print(f"\nüéØ BILAN: {passed}/{len(tests_results)} tests pass√©s")

    if passed == len(tests_results):
        print("üéâ TOUS LES TESTS PASS√âS - Architecture pr√™te pour production!")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√© - V√©rifiez la configuration")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)