"""
Module d'extraction Google Maps
Utilise la nouvelle API Places (New) de Google pour extraire les informations h√¥teli√®res
"""

import os
import asyncio
import aiohttp
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
from dataclasses import dataclass

# Charger automatiquement le fichier .env


from .rate_limiter import rate_limit_manager, RateLimitConfig
from cache.gmaps_cache import get_global_cache
from config.settings import settings


@dataclass
class GoogleMapsConfig:
    """Configuration pour l'API Google Maps"""
    api_key: str
    base_url: str = "https://places.googleapis.com/v1"
    timeout: int = 30
    max_retries: int = 3
    
    @classmethod
    def from_env(cls):
        """Cr√©e la configuration depuis les variables d'environnement"""
        api_key = os.getenv('GOOGLE_MAPS_API_KEY')
        if not api_key:
            raise ValueError("GOOGLE_MAPS_API_KEY non trouv√©e dans les variables d'environnement")
        
        return cls(api_key=api_key)


class GoogleMapsExtractor:
    """Extracteur d'informations Google Maps pour h√¥tels"""
    
    def __init__(self, config: GoogleMapsConfig = None):
        self.config = config or GoogleMapsConfig.from_env()
        
        # Configuration du rate limiter Google Maps
        rate_config = RateLimitConfig(
            requests_per_minute=int(os.getenv('GOOGLE_MAPS_QUOTA_PER_MINUTE', 60)),
            requests_per_second=5,
            burst_requests=3
        )
        self.rate_limiter = rate_limit_manager.get_limiter('google_maps', rate_config)
        
        # Headers pour l'API Places (New)
        self.headers = {
            'X-Goog-Api-Key': self.config.api_key,
            'X-Goog-FieldMask': self._get_field_mask(),
            'Content-Type': 'application/json'
        }
    
    def _get_field_mask(self) -> str:
        """D√©finit les champs √† r√©cup√©rer de l'API Places
        
        Returns:
            str: Masque de champs pour l'API
        """
        fields = [
            'places.id',
            'places.name',  # üîß RETOUR: name (avec extraction intelligente)
            'places.formattedAddress',
            'places.location',
            'places.rating',
            'places.userRatingCount',
            'places.websiteUri',
            'places.nationalPhoneNumber',
            'places.businessStatus',
            'places.primaryType',
            'places.types',
            'places.regularOpeningHours',
            'places.photos',
            'places.googleMapsUri'
        ]
        return ','.join(fields)
    
    async def extract_hotel_info(self, hotel_name: str, hotel_address: str) -> Dict[str, Any]:
        """Extrait les informations Google Maps pour un h√¥tel
        
        Args:
            hotel_name (str): Nom de l'h√¥tel
            hotel_address (str): Adresse de l'h√¥tel
            
        Returns:
            Dict[str, Any]: Informations extraites de Google Maps
        """
        
        search_queries = self._build_search_queries(hotel_name, hotel_address)
        
        for query in search_queries:
            try:
                result = await self._search_place(query)
                
                if result and self._is_valid_hotel_result(result, hotel_name):
                    # üîß TEMPORAIRE: utiliser directement les donn√©es de recherche
                    return self._format_hotel_data(result, hotel_name, hotel_address)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur recherche '{query}': {e}")
                continue
        
        # Aucun r√©sultat trouv√©
        return self._create_empty_result(hotel_name, hotel_address, "Aucun r√©sultat trouv√©")
    
    def _build_search_queries(self, hotel_name: str, hotel_address: str) -> List[str]:
        """Construit plusieurs requ√™tes de recherche pour maximiser les chances de succ√®s
        
        Args:
            hotel_name (str): Nom de l'h√¥tel
            hotel_address (str): Adresse de l'h√¥tel
            
        Returns:
            List[str]: Liste des requ√™tes √† tester
        """
        
        queries = []
        
        # Nettoyage du nom (retirer "H√¥tel", "Hotel", etc.)
        clean_name = hotel_name.replace("H√¥tel", "").replace("Hotel", "").strip()
        
        # Extraction de la ville depuis l'adresse
        city = self._extract_city_from_address(hotel_address)
        
        # Construire diff√©rentes variations
        queries.append(f"{hotel_name} {city}")  # Nom complet + ville
        queries.append(f"{clean_name} hotel {city}")  # Nom nettoy√© + hotel + ville
        queries.append(f"{hotel_name}")  # Nom complet seul
        queries.append(f"{clean_name} {hotel_address}")  # Nom + adresse compl√®te
        
        return queries
    
    def _extract_city_from_address(self, address: str) -> str:
        """Extrait la ville depuis une adresse
        
        Args:
            address (str): Adresse compl√®te
            
        Returns:
            str: Nom de la ville
        """
        # V√©rifier si address est valide (pas NaN, None, ou vide)
        if not address or str(address).lower() in ['nan', 'none', '']:
            return ""
        
        # Convertir en string pour √™tre s√ªr
        address_str = str(address).strip()
        if not address_str:
            return ""
        
        # Logique simple d'extraction de ville
        parts = address_str.split()
        
        # Chercher des indices de ville (codes postaux, mots-cl√©s)
        for i, part in enumerate(parts):
            if part.isdigit() and len(part) in [4, 5]:  # Code postal
                if i + 1 < len(parts):
                    return parts[i + 1]
        
        # Fallback: prendre les derniers mots
        return ' '.join(parts[-2:]) if len(parts) >= 2 else parts[-1] if parts else ""
    
    async def _search_place(self, query: str) -> Optional[Dict[str, Any]]:
        """Effectue une recherche de lieu via l'API Places
        
        Args:
            query (str): Requ√™te de recherche
            
        Returns:
            Optional[Dict[str, Any]]: Premier r√©sultat trouv√© ou None
        """
        
        await self.rate_limiter.acquire()
        
        search_data = {
            "textQuery": query,
            "maxResultCount": 5,
            "locationBias": {
                "circle": {
                    "center": {"latitude": 50.8505, "longitude": 4.3488},  # Brussels par d√©faut
                    "radius": 50000  # 50km
                }
            }
        }
        
        # Debug minimal pour Google Maps
        print(f"üîç Recherche Google Maps: '{query}'")
        
        # üîß CORRECTION: Session aiohttp d√©di√©e pour √©viter "Event loop is closed"
        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            try:
                async with session.post(
                    f"{self.config.base_url}/places:searchText",
                    headers=self.headers,
                    json=search_data
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        places = data.get('places', [])
                        if places:
                            print(f"‚úÖ Trouv√© sur Google Maps")
                        return places[0] if places else None
                    
                    elif response.status == 403:
                        # Debug sp√©cifique pour l'erreur 403
                        response_text = await response.text()
                        print(f"‚ùå Erreur 403 - D√©tails: {response_text}")
                        
                        # Analyser la r√©ponse d'erreur
                        if "API key not valid" in response_text:
                            raise Exception("‚ùå Cl√© API invalide - V√©rifiez votre GOOGLE_MAPS_API_KEY")
                        elif "API has not been used" in response_text:
                            raise Exception("‚ùå API Places pas activ√©e - Activez-la dans Google Cloud Console")
                        elif "This IP" in response_text:
                            raise Exception("‚ùå IP non autoris√©e - Configurez les restrictions IP")
                        elif "quota" in response_text.lower():
                            raise Exception("‚ùå Quota d√©pass√© - V√©rifiez vos limites API")
                        else:
                            raise Exception(f"‚ùå Erreur 403: {response_text}")
                    
                    elif response.status == 429:
                        await self.rate_limiter.handle_error(429)
                        raise Exception("Rate limit d√©pass√©")
                    
                    else:
                        response_text = await response.text()
                        print(f"‚ùå Erreur {response.status} - D√©tails: {response_text}")
                        await self.rate_limiter.handle_error(response.status)
                        raise Exception(f"Erreur API: {response.status}")
            
            except asyncio.TimeoutError:
                raise Exception("Timeout de la requ√™te")
    
    async def _get_place_details(self, place_id: str) -> Dict[str, Any]:
        """R√©cup√®re les d√©tails d'un lieu via son ID
        
        Args:
            place_id (str): ID du lieu Google Maps
            
        Returns:
            Dict[str, Any]: D√©tails complets du lieu
        """
        
        await self.rate_limiter.acquire()
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.config.timeout)) as session:
            try:
                async with session.get(
                    f"{self.config.base_url}/places/{place_id}",
                    headers=self.headers
                ) as response:
                    
                    if response.status == 200:
                        return await response.json()
                    
                    elif response.status == 429:
                        await self.rate_limiter.handle_error(429)
                        raise Exception("Rate limit d√©pass√©")
                    
                    else:
                        await self.rate_limiter.handle_error(response.status)
                        raise Exception(f"Erreur API: {response.status}")
            
            except asyncio.TimeoutError:
                raise Exception("Timeout de la requ√™te")
    
    def _is_valid_hotel_result(self, place_data: Dict[str, Any], hotel_name: str) -> bool:
        """V√©rifie si le r√©sultat correspond bien √† un h√¥tel - Version finale propre
        
        Args:
            place_data (Dict[str, Any]): Donn√©es du lieu
            hotel_name (str): Nom de l'h√¥tel recherch√©
            
        Returns:
            bool: True si c'est un r√©sultat valide
        """
        
        # Extraction intelligente du nom lisible
        place_name = self._extract_readable_name(place_data).lower()
        search_name = hotel_name.lower()
        
        # Si pas de nom, accepter (tr√®s permissif)
        if not place_name:
            return True
        
        # Nettoyer les noms pour comparaison
        clean_search = search_name.replace("h√¥tel", "").replace("hotel", "").replace("le ", "").replace("la ", "").strip()
        clean_place = place_name.replace("h√¥tel", "").replace("hotel", "").replace("le ", "").replace("la ", "").strip()
        
        # Validation intelligente - crit√®res √©largis
        validations = [
            # 1. Correspondance partielle des noms
            any(word in clean_place for word in clean_search.split() if len(word) > 2),
            # 2. Correspondance inverse  
            any(word in clean_search for word in clean_place.split() if len(word) > 2),
            # 3. Mots-cl√©s h√¥teliers
            any(keyword in clean_place for keyword in ['plaza', 'brussels', 'hotel', 'h√¥tel']),
            # 4. Validation tr√®s permissive si types d'√©tablissement correspondent
            any(hotel_type in place_data.get('types', []) for hotel_type in ['lodging', 'hotel'])
        ]
        
        return any(validations)
    
    def _extract_readable_name(self, place_data: Dict[str, Any]) -> str:
        """Extrait le nom lisible de l'h√¥tel depuis diff√©rentes sources
        
        Args:
            place_data (Dict[str, Any]): Donn√©es de l'API Google Maps
            
        Returns:
            str: Nom lisible de l'h√¥tel
        """
        
        # 1. V√©rifier si le champ 'name' contient un nom lisible (pas un ID)
        name = place_data.get('name', '')
        if name and not name.startswith('places/'):
            return name
        
        # 2. Chercher dans les attributions des photos (source principale pour les noms d'h√¥tels)
        photos = place_data.get('photos', [])
        for photo in photos[:5]:  # V√©rifier les 5 premi√®res photos
            attributions = photo.get('authorAttributions', [])
            for attribution in attributions:
                display_name = attribution.get('displayName', '')
                if display_name and any(word in display_name.lower() for word in ['hotel', 'h√¥tel', 'plaza', 'brussels']):
                    return display_name
        
        # 3. Fallback: extraire depuis l'adresse
        address = place_data.get('formattedAddress', '')
        if address:
            # Prendre les premiers mots avant la premi√®re virgule
            parts = address.split(',')
            if parts:
                potential_name = parts[0].strip()
                if len(potential_name) > 5:  # Nom raisonnablement long
                    return potential_name
        
        # 4. Dernier fallback
        return ""
    
    def _format_hotel_data(self, place_data: Dict[str, Any], original_name: str, original_address: str) -> Dict[str, Any]:
        """Formate les donn√©es Google Maps selon le sch√©ma attendu
        
        Args:
            place_data (Dict[str, Any]): Donn√©es brutes de l'API
            original_name (str): Nom original de l'h√¥tel
            original_address (str): Adresse originale
            
        Returns:
            Dict[str, Any]: Donn√©es format√©es
        """
        
        # Extraction des heures d'ouverture
        opening_hours = self._format_opening_hours(place_data.get('regularOpeningHours'))
        
        # Extraction de l'image principale
        header_image_url = self._get_header_image_url(place_data.get('photos', []))
        
        # Extraction de la r√©gion/√©tat
        region = self._extract_region_from_address(place_data.get('formattedAddress', ''))
        
        # Extraire le nom lisible intelligemment
        hotel_display_name = self._extract_readable_name(place_data) or original_name
        
        return {
            'input': f"{original_name} - {original_address}",
            'sharableLink': place_data.get('googleMapsUri', ''),
            'name': hotel_display_name,  # üîß CORRECTION: nom extrait intelligemment
            'isClosed': place_data.get('businessStatus') != 'OPERATIONAL',
            'website': place_data.get('websiteUri', ''),
            'category': self._get_primary_category(place_data.get('types', [])),
            'address': place_data.get('formattedAddress', original_address),
            'oloc': region,
            'averageRating': place_data.get('rating', 0),
            'reviewCount': place_data.get('userRatingCount', 0),
            'phoneNumber': place_data.get('nationalPhoneNumber', ''),
            'headerImageUrl': header_image_url,
            'openingHours': opening_hours,
            'extraction_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'extraction_status': 'success'
        }
    
    def _format_opening_hours(self, opening_hours_data: Optional[Dict]) -> str:
        """Formate les heures d'ouverture
        
        Args:
            opening_hours_data (Optional[Dict]): Donn√©es d'heures d'ouverture
            
        Returns:
            str: Heures format√©es
        """
        
        if not opening_hours_data or 'weekdayDescriptions' not in opening_hours_data:
            return ""
        
        descriptions = opening_hours_data['weekdayDescriptions']
        return "; ".join(descriptions) if descriptions else ""
    
    def _get_header_image_url(self, photos: List[Dict]) -> str:
        """R√©cup√®re l'URL de l'image principale
        
        Args:
            photos (List[Dict]): Liste des photos
            
        Returns:
            str: URL de l'image ou cha√Æne vide
        """
        
        if not photos:
            return ""
        
        # Prendre la premi√®re photo et construire l'URL
        first_photo = photos[0]
        name = first_photo.get('name', '')
        
        if name:
            # Format d'URL pour r√©cup√©rer la photo (400px de large)
            return f"https://places.googleapis.com/v1/{name}/media?maxWidthPx=400&key={self.config.api_key}"
        
        return ""
    
    def _extract_region_from_address(self, address: str) -> str:
        """Extrait la r√©gion/√©tat depuis l'adresse
        
        Args:
            address (str): Adresse compl√®te
            
        Returns:
            str: R√©gion/√©tat
        """
        
        if not address:
            return ""
        
        # Logique simple : prendre le dernier √©l√©ment apr√®s la derni√®re virgule
        parts = address.split(',')
        return parts[-1].strip() if len(parts) > 1 else ""
    
    def _get_primary_category(self, types: List[str]) -> str:
        """D√©termine la cat√©gorie principale du lieu
        
        Args:
            types (List[str]): Types du lieu
            
        Returns:
            str: Cat√©gorie principale
        """
        
        # Hi√©rarchie des types pr√©f√©r√©s
        preferred_types = ['hotel', 'lodging', 'resort', 'motel', 'establishment']
        
        for preferred in preferred_types:
            if preferred in types:
                return preferred
        
        return types[0] if types else "hotel"
    
    def _create_empty_result(self, hotel_name: str, hotel_address: str, error_message: str) -> Dict[str, Any]:
        """Cr√©e un r√©sultat vide en cas d'√©chec
        
        Args:
            hotel_name (str): Nom de l'h√¥tel
            hotel_address (str): Adresse de l'h√¥tel
            error_message (str): Message d'erreur
            
        Returns:
            Dict[str, Any]: R√©sultat vide avec erreur
        """
        
        return {
            'input': f"{hotel_name} - {hotel_address}",
            'sharableLink': '',
            'name': hotel_name,
            'isClosed': False,
            'website': '',
            'category': 'hotel',
            'address': hotel_address,
            'oloc': '',
            'averageRating': 0,
            'reviewCount': 0,
            'phoneNumber': '',
            'headerImageUrl': '',
            'openingHours': '',
            'extraction_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'extraction_status': 'failed',
            'error': error_message
        }


async def extract_hotels_batch(hotels_info: List[Dict[str, str]]) -> List[Dict[str, Any]]:
    """Extrait les informations Google Maps pour un batch d'h√¥tels avec cache intelligent
    
    Args:
        hotels_info (List[Dict[str, str]]): Liste des infos h√¥tels (name, address)
        
    Returns:
        List[Dict[str, Any]]: R√©sultats d'extraction
    """
    
    # Initialiser le cache
    cache = await get_global_cache()
    extractor = GoogleMapsExtractor()
    results = []
    
    # Phase 1: V√©rifier le cache pour tous les h√¥tels
    cache_results = await cache.batch_get(hotels_info)
    hotels_to_fetch = []
    hotels_to_cache = []
    
    print(f"üîç V√©rification cache pour {len(hotels_info)} h√¥tels...")
    
    for i, hotel_info in enumerate(hotels_info):
        cache_key = cache._generate_cache_key(hotel_info['name'], hotel_info['address'])
        cached_data = cache_results.get(cache_key)
        
        if cached_data:
            # Utiliser donn√©es cach√©es
            results.append(cached_data)
            print(f"üíæ Cache HIT: {hotel_info['name']}")
        else:
            # Marquer pour extraction
            hotels_to_fetch.append((i, hotel_info))
            results.append(None)  # Placeholder
    
    # Phase 2: Extraire les h√¥tels manquants
    if hotels_to_fetch:
        print(f"üåê Extraction API pour {len(hotels_to_fetch)} h√¥tels...")
        
        for original_index, hotel_info in hotels_to_fetch:
            try:
                result = await extractor.extract_hotel_info(
                    hotel_info['name'], 
                    hotel_info['address']
                )
                results[original_index] = result
                
                # Mettre en cache imm√©diatement si succ√®s
                if result.get('success'):
                    await cache.set(hotel_info['name'], hotel_info['address'], result)
                    print(f"üíæ Mis en cache: {hotel_info['name']}")
                
                # Reset des erreurs en cas de succ√®s
                extractor.rate_limiter.reset_errors()
                
            except Exception as e:
                error_result = extractor._create_empty_result(
                    hotel_info['name'], 
                    hotel_info['address'], 
                    str(e)
                )
                results[original_index] = error_result
    
    # Statistiques cache
    if settings.cache.enable_cache:
        cache_hits = len([r for r in cache_results.values() if r is not None])
        cache_misses = len(hotels_to_fetch)
        hit_rate = (cache_hits / len(hotels_info) * 100) if hotels_info else 0
        
        print(f"üìä Cache: {cache_hits} hits, {cache_misses} misses ({hit_rate:.1f}% hit rate)")
        
        # √âconomies API
        api_savings = cache_hits
        if api_savings > 0:
            print(f"üí∞ API √©conomis√©es: {api_savings} requ√™tes ({hit_rate:.1f}% r√©duction)")
    
    return results 